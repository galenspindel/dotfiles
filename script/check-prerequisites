#!/usr/bin/env bash
#
# check-prerequisites
#
# Validates system requirements before running dotfiles setup

set -e

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

# Color output functions
info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

warn () {
  printf "\r\033[2K  [ \033[0;33mWARN\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
}

error_exit() {
  fail "$1"
  echo ''
  echo 'Prerequisites check failed. Please fix the above issues and try again.'
  exit 1
}

# Check if we're on macOS
check_macos() {
  info 'Checking operating system'
  if [ "$(uname -s)" != "Darwin" ]; then
    error_exit "This dotfiles setup is designed for macOS only. Detected: $(uname -s)"
  fi
  success 'Running on macOS'
}

# Check if Xcode Command Line Tools are installed
check_xcode_tools() {
  info 'Checking Xcode Command Line Tools'
  if ! xcode-select -p >/dev/null 2>&1; then
    error_exit "Xcode Command Line Tools not installed. Run: xcode-select --install"
  fi
  success 'Xcode Command Line Tools installed'
}

# Check if git is available
check_git() {
  info 'Checking git availability'
  if ! command -v git >/dev/null 2>&1; then
    error_exit "Git not found. Install Xcode Command Line Tools: xcode-select --install"
  fi
  success "Git available: $(git --version)"
}

# Check if curl is available
check_curl() {
  info 'Checking curl availability'
  if ! command -v curl >/dev/null 2>&1; then
    warn "curl not found (unusual for macOS)"
  else
    success 'curl available'
  fi
}

# Check App Store sign-in (for mas)
check_app_store() {
  info 'Checking App Store sign-in'
  if ! command -v mas >/dev/null 2>&1; then
    warn 'mas not installed yet (will be installed via Homebrew)'
    return 0
  fi
  
  if ! mas account >/dev/null 2>&1; then
    warn 'Not signed into App Store. Sign in via App Store app for mas to work.'
  else
    success "Signed into App Store: $(mas account)"
  fi
}

# Check internet connectivity
check_internet() {
  info 'Checking internet connectivity'
  if ! curl -s --connect-timeout 5 https://github.com >/dev/null; then
    error_exit "No internet connection. Required for downloading dependencies."
  fi
  success 'Internet connection available'
}

# Check available disk space (minimum 2GB)
check_disk_space() {
  info 'Checking available disk space'
  available_kb=$(df / | awk 'NR==2 {print $4}')
  available_gb=$((available_kb / 1024 / 1024))
  
  if [ "$available_gb" -lt 2 ]; then
    error_exit "Insufficient disk space. Available: ${available_gb}GB, Required: 2GB minimum"
  fi
  success "Sufficient disk space: ${available_gb}GB available"
}

# Check if we have write permissions to home directory
check_home_permissions() {
  info 'Checking home directory permissions'
  if [ ! -w "$HOME" ]; then
    error_exit "No write permission to home directory: $HOME"
  fi
  success 'Home directory writable'
}

# Warn about existing conflicting files
check_existing_configs() {
  info 'Checking for existing configuration conflicts'
  conflicts=()
  
  # Check for existing dotfiles that might conflict
  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*' 2>/dev/null); do
    dst="$HOME/.$(basename "${src%.*}")"
    if [ -f "$dst" ] && [ ! -L "$dst" ]; then
      conflicts+=("$dst")
    fi
  done
  
  if [ ${#conflicts[@]} -gt 0 ]; then
    warn "Found existing config files that will need to be handled:"
    for conflict in "${conflicts[@]}"; do
      warn "  - $conflict"
    done
    warn "Bootstrap script will ask how to handle these files."
  else
    success 'No conflicting config files found'
  fi
}

# Main execution
main() {
  echo ''
  echo 'Running prerequisites check...'
  echo ''
  
  check_macos
  check_xcode_tools
  check_git
  check_curl
  check_internet
  check_disk_space
  check_home_permissions
  check_existing_configs
  check_app_store
  
  echo ''
  success 'All prerequisites satisfied!'
  echo ''
  echo 'You can now run: script/bootstrap'
  echo ''
}

main "$@"